{"version":3,"sources":["../server/device.js"],"names":["putEvent","registerDevice","getDevice","config","silent","connectionString","process","env","connectionStringHostName","connectionStringSharedAccessKeyName","connectionStringSharedAccessKey","registry","Registry","fromConnectionString","sensorId","sensorKey","sensorState","sensorLat","sensorLng","sensorType","Promise","resolve","reject","clientConnectionString","client","clientFromConnectionString","now","Date","open","err","Error","toString","data","JSON","stringify","parseFloat","eventTime","getTime","message","sendEvent","res","device","Device","deviceId","create","deviceInfo","get"],"mappings":";;;;;QAWgBA,Q,GAAAA,Q;QAuBAC,c,GAAAA,c;QAYAC,S,GAAAA,S;;AA9ChB;;;;AACA;;;;AACA;;AACA;;;;;;AAEA,iBAAOC,MAAP,CAAc,EAACC,QAAQ,IAAT,EAAd;;AAEA,IAAMC,mBAAmBC,QAAQC,GAAR,CAAYC,wBAAZ,GAAuC,GAAvC,GAA6CF,QAAQC,GAAR,CAAYE,mCAAzD,GAA+F,GAA/F,GAAqGH,QAAQC,GAAR,CAAYG,+BAA1I;;AAEA,IAAMC,WAAW,sBAAOC,QAAP,CAAgBC,oBAAhB,CAAqCR,gBAArC,CAAjB;;AAEO,SAASL,QAAT,CAAkBc,QAAlB,EAA4BC,SAA5B,EAAuCC,WAAvC,EAAoDC,SAApD,EAA+DC,SAA/D,EAA0EC,UAA1E,EAAsF;AAC3F,SAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtC,QAAMC,yBAAyBjB,QAAQC,GAAR,CAAYC,wBAAZ,mBAAkDM,QAAlD,2BAAmFC,SAAnF,CAA/B;AACA,QAAMS,SAAS,6BAAcC,0BAAd,CAAyCF,sBAAzC,CAAf;AACA,QAAMG,MAAM,IAAIC,IAAJ,EAAZ;AACAH,WAAOI,IAAP,CAAY,eAAO;AACjB;AACA,UAAIC,GAAJ,EAAS;AACPP,eAAOQ,MAAMD,IAAIE,QAAJ,EAAN,CAAP;AACD,OAFD,MAGK;AACH,YAAIC,OAAOC,KAAKC,SAAL,CAAe,EAACpB,UAAUA,QAAX,EAAqBE,aAAamB,WAAWnB,WAAX,CAAlC,EAA2DC,WAAWkB,WAAWlB,SAAX,CAAtE,EAA6FC,WAAWiB,WAAWjB,SAAX,CAAxG,EAA+HC,YAAYA,UAA3I,EAAuJiB,WAAWV,IAAIW,OAAJ,EAAlK,EAAf,CAAX;AACA,YAAIC,UAAU,4BAAYN,IAAZ,CAAd;AACA;AACAR,eAAOe,SAAP,CAAiBD,OAAjB,EAA0B,UAACT,GAAD,EAAMW,GAAN,EAAc;AACtC,cAAIX,GAAJ,EAASP,OAAOQ,MAAMD,IAAIE,QAAJ,EAAN,CAAP;AACT,cAAIS,GAAJ,EAASnB,QAAQmB,GAAR;AACV,SAHD;AAID;AACF,KAdD;AAeD,GAnBM,CAAP;AAoBD;;AAEM,SAASvC,cAAT,CAAwBa,QAAxB,EAAkC;AACvC,SAAO,IAAIM,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtC,QAAImB,SAAS,IAAI,sBAAOC,MAAX,CAAkB,IAAlB,CAAb;AACAD,WAAOE,QAAP,GAAkB7B,QAAlB;AACAH,aAASiC,MAAT,CAAgBH,MAAhB,EAAwB,UAACZ,GAAD,EAAMgB,UAAN,EAAkBL,GAAlB,EAA0B;AAChD;AACA,UAAIX,GAAJ,EAASP,OAAOQ,MAAMD,IAAIE,QAAJ,EAAN,CAAP;AACT,UAAIc,UAAJ,EAAgBxB,QAAQwB,UAAR;AACjB,KAJD;AAKD,GARM,CAAP;AASD;;AAEM,SAAS3C,SAAT,CAAmBY,QAAnB,EAA6B;AAClC,SAAO,IAAIM,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtCX,aAASmC,GAAT,CAAahC,QAAb,EAAuB,UAACe,GAAD,EAAMgB,UAAN,EAAkBL,GAAlB,EAA0B;AAC/C,UAAIX,GAAJ,EAASP,OAAOQ,MAAMD,IAAIE,QAAJ,EAAN,CAAP;AACT,UAAIc,UAAJ,EAAgBxB,QAAQwB,UAAR;AACjB,KAHD;AAID,GALM,CAAP;AAMD;;kBAEc,EAAE7C,kBAAF,EAAYC,8BAAZ,EAA4BC,oBAA5B,E","file":"device.js","sourcesContent":["import iothub from 'azure-iothub';\nimport iotdevicemqtt from 'azure-iot-device-mqtt';\nimport {Message} from 'azure-iot-device';\nimport dotenv from 'dotenv';\n\ndotenv.config({silent: true});\n\nconst connectionString = process.env.connectionStringHostName + ';' + process.env.connectionStringSharedAccessKeyName + ';' + process.env.connectionStringSharedAccessKey;\n\nconst registry = iothub.Registry.fromConnectionString(connectionString);\n\nexport function putEvent(sensorId, sensorKey, sensorState, sensorLat, sensorLng, sensorType) {\n  return new Promise((resolve, reject) => {\n    const clientConnectionString = process.env.connectionStringHostName+`;DeviceId=${sensorId}` + `;SharedAccessKey=${sensorKey}`;\n    const client = iotdevicemqtt.clientFromConnectionString(clientConnectionString);\n    const now = new Date();\n    client.open(err => {\n      // if (res) console.log('registry create> status: ' + res.statusCode + ' ' + res.statusMessage);\n      if (err) {\n        reject(Error(err.toString()));\n      }\n      else {\n        var data = JSON.stringify({sensorId: sensorId, sensorState: parseFloat(sensorState), sensorLat: parseFloat(sensorLat), sensorLng: parseFloat(sensorLng), sensorType: sensorType, eventTime: now.getTime()});\n        var message = new Message(data);\n        // console.log(\"sending event: \" + message.getData());\n        client.sendEvent(message, (err, res) => {\n          if (err) reject(Error(err.toString()));\n          if (res) resolve(res);\n        });\n      }\n    });\n  });\n}\n\nexport function registerDevice(sensorId) {\n  return new Promise((resolve, reject) => {\n    var device = new iothub.Device(null);\n    device.deviceId = sensorId;\n    registry.create(device, (err, deviceInfo, res) => {\n      // if (res) console.log('registry create> status: ' + res.statusCode + ' ' + res.statusMessage);\n      if (err) reject(Error(err.toString()));\n      if (deviceInfo) resolve(deviceInfo);\n    });\n  });\n}\n\nexport function getDevice(sensorId) {\n  return new Promise((resolve, reject) => {\n    registry.get(sensorId, (err, deviceInfo, res) => {\n      if (err) reject(Error(err.toString()));\n      if (deviceInfo) resolve(deviceInfo);\n    });\n  });\n}\n\nexport default { putEvent, registerDevice, getDevice };\n"]}